# question_number ->
#
# type1:
# jobnumber,length_of_job,turnaround_time,response_time,wait_time
# jobnumber,length ...
# ...

1 ->

FIFO:
0,200,200,0,0
1,200,400,200,200
2,200,600,400,400

SJF:
0,200,200,0,0
1,200,400,200,200
2,200,600,400,400


2 ->

FIFO:
0,100,100,0,100
1,200,300,100,100
2,300,600,300,300

SJF:
0,100,100,0,0
1,200,300,100,100
2,300,600,300,300


3 ->

RR:
0,100,298,0,198
1,200,499,1,299
3,300,600,2,300


4 -> Workloads that have jobs already in the order of their lengths.


5 -> Workloads will need to be of same length as of the quantum length.


6 -> The response time will increase with the increase in jo length. This is because the subsequent loads' wait time is the prior job's turnaround time. We can demonstrate the trend by feeding increasingly growing the job lengths to the -l option. For example for jobs of length 1, 2, and 3, the response times are 0, 1, and 2 respectively. While for jobs with length 100, 200, and 300, the response times are 0, 100, and 200.


7 -> As quantum length increase the response time will grow and reach its maximum value, which is the turnaround time of its preceding job.

As per the equation, ... I thought this wasn't a theory of computations class, I'll try my best:

response_time(N) = min(
						quantum_time * (N - 1),
						turnaround_time(N) - length_of_job(N)
					)

